"  Vim plug
" https://github.com/junegunn/vim-plug
" ------------------------------------------------------------------------------

if has('nvim')
  let g:plugin_path = '~/.config/nvim/plugged'
  let $NVIM_TUI_ENABLE_CURSOR_SHAPE = 1
else
  let g:plugin_path = '~/.vim/plugged'
  set nocompatible
endif

call plug#begin(g:plugin_path)

" Theme
" ------------------------------------------------------------------------------

Plug 'joshdick/onedark.vim'

" tmux
" ------------------------------------------------------------------------------

if executable('tmux')
  " Navigate between vim and tmux splits
  Plug 'christoomey/vim-tmux-navigator'
  " Restore `FocusLost` and `FocusGained` events in tmux
  Plug 'tmux-plugins/vim-tmux-focus-events'
  " tmux statusline generator
  Plug 'edkolev/tmuxline.vim'
endif

" Finding and replacing
" ------------------------------------------------------------------------------

" Run Ack from inside Vim
Plug 'mileszs/ack.vim'
" Execute operations on the files in the quickfix list
Plug 'henrik/vim-qargs'
" Fuzzy finding anything
Plug 'junegunn/fzf', {'dir': '~/.fzf', 'do': './install --all'}
" fzf integration for Vim
Plug 'junegunn/fzf.vim'
" Improved search in Vim
Plug 'junegunn/vim-slash'
" Multiple cursors
Plug 'terryma/vim-multiple-cursors'

" File management
" ------------------------------------------------------------------------------

" File browser
Plug 'scrooloose/nerdtree'
" Easy directory browsing with `-`, integrates with NERDTree
Plug 'tpope/vim-vinegar'

" Buffers
" ------------------------------------------------------------------------------

" Close all buffers except current
Plug 'schickling/vim-bufonly', {'on': 'BufOnly'}
" Close buffers without losing window layout
Plug 'moll/vim-bbye'
" Manage buffers
Plug 'jlanzarotta/bufexplorer'

" Language pack
" ------------------------------------------------------------------------------

" Syntax and highlighting for every language
Plug 'sheerun/vim-polyglot'
Plug 'blockloop/vim-swigjs'

" Tags
" ------------------------------------------------------------------------------

" Generates ctags automatically
Plug 'ludovicchabant/vim-gutentags'

" Editing
" ------------------------------------------------------------------------------

" Insert or delete brackets, parens, quotes in pair.
Plug 'jiangmiao/auto-pairs'
" Display indent levels
Plug 'tpope/vim-repeat'
" Comment out blocks of code
Plug 'tpope/vim-commentary'
" Toggle location and quickfix lists
Plug 'Valloric/ListToggle'
" Advanced movement similar to motions
Plug 'justinmk/vim-sneak'
" Correct common typos
Plug 'chip/vim-fat-finger'
" Keep folds performant
Plug 'Konfekt/FastFold'
" Move between windows and allow swapping position
Plug 't9md/vim-choosewin'
" Remember cursor position in closed buffers
Plug 'dietsche/vim-lastplace'
" Open files from Quickfix
Plug 'yssl/QFEnter'
" Move blocks of code with ALT+j/k
Plug 'matze/vim-move'

" Text objects
" ------------------------------------------------------------------------------

" Allow motions like `w`, `b` and `iw` to work on camel case
Plug 'chaoren/vim-wordmotion'
" Improve text objects for arguments, brackets etc
Plug 'wellle/targets.vim'
" Move arguments
Plug 'AndrewRadev/sideways.vim'
" Add various text objects
Plug 'kana/vim-textobj-user'
Plug 'kana/vim-textobj-function'
" ae
Plug 'kana/vim-textobj-entire'
" al
Plug 'kana/vim-textobj-line'
" af
Plug 'thinca/vim-textobj-function-javascript', {'for': ['javascript', 'javascript.jsx', 'json']}
" aE
Plug 'whatyouhide/vim-textobj-erb', {'for': 'eruby'}
" ac
Plug 'jasonlong/vim-textobj-css', {'for': ['css', 'scss']}
" ax
Plug 'whatyouhide/vim-textobj-xmlattr'

" General
" ------------------------------------------------------------------------------

" Set spaces and other settings on a per project basis
Plug 'editorconfig/editorconfig-vim'
" GUI for the undo tree
Plug 'mbbill/undotree', {'on': 'UndotreeToggle'}
" Switch the cwd based on the file location
Plug 'airblade/vim-rooter'

" Refactoring
" ------------------------------------------------------------------------------

" Split and join HTML tags, JS objects etc
Plug 'AndrewRadev/splitjoin.vim'
" Make it easy to add/remove/change brackets, quotes etc
Plug 'tpope/vim-surround'

" Copy/Paste behaviour
" ------------------------------------------------------------------------------

" Stop everything saving to a register and instead rely on just `m` for cut
Plug 'svermeulen/vim-easyclip'
" Improve pasting code from the clipboard
Plug 'ConradIrwin/vim-bracketed-paste'

" Sessions
" ------------------------------------------------------------------------------

Plug 'xolox/vim-misc'
Plug 'xolox/vim-session'

" Status bar
" ------------------------------------------------------------------------------

Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'

" Tabs
" ------------------------------------------------------------------------------

" Make managing tabs easier with rename, add, delete etc
Plug 'gcmt/taboo.vim'
" Allow a window to be fully viewed. Useful when multiple splits are in use
Plug 'troydm/zoomwintab.vim'

" Snippets
" ------------------------------------------------------------------------------

Plug 'epilande/vim-react-snippets'
Plug 'SirVer/ultisnips'
Plug 'honza/vim-snippets'

" Git
" ------------------------------------------------------------------------------

Plug 'tpope/vim-fugitive'
Plug 'mhinz/vim-signify'
Plug 'junegunn/gv.vim'

" Linting
" ------------------------------------------------------------------------------

Plug 'neomake/neomake'
Plug 'jaawerth/nrun.vim'

" HTML/CSS
" ------------------------------------------------------------------------------

" Highlight css colors with their color
Plug 'ap/vim-css-color', {'for': ['css', 'scss']}
" Easy HTML and CSS generation
Plug 'mattn/emmet-vim'
" Automatically add a closing HTML tag
Plug 'alvan/vim-closetag'

" JavaScript
" ------------------------------------------------------------------------------

Plug 'pangloss/vim-javascript', {'for': ['javascript', 'javascript.jsx']}
Plug 'moll/vim-node', {'for': ['javascript', 'javascript.jsx', 'json']}
Plug 'peteyy/mocha.vim', {'for': ['javascript', 'javascript.jsx']}

if has('nvim')
  " Autocomplete
  function! DoRemote(arg)
    UpdateRemotePlugins
  endfunction
  Plug 'Shougo/deoplete.nvim', {'do': function('DoRemote')}
  Plug 'carlitux/deoplete-ternjs'
else
  Plug 'sjl/vitality.vim'
endif

" Devicons have to come after other plugins
Plug 'ryanoasis/vim-devicons'

call plug#end()

" Shortcut for checking if a plugin is loaded
function! s:has_plugin(plugin)
  let lookup = 'g:plugs["' . a:plugin . '"]'
  return exists(lookup)
endfunction

"  General config
" ------------------------------------------------------------------------------

" Theme
set background=dark
silent! colorscheme onedark

" Treat <li> and <p> tags like the block tags they are
let g:html_indent_tags='li\|p'

" Set <space> to leader
let mapleader=' '
let maplocalleader='\'

" Turn off swapfiles
set noswapfile
set nobackup
set nowb

" Allow editing of binary files
" Must be set before expandtab
" http://stackoverflow.com/a/26901774
set binary

" Enable term 24 bit colour in latest neovim
" https://github.com/neovim/neovim/wiki/Following-HEAD#20160511
if (has('termguicolors'))
  set termguicolors
endif

" Make it obvious where 80 characters is
set textwidth=80
set colorcolumn=+1

" Use ``indent`` based folding
set foldmethod=indent
" Disable all folds on file open until `zc` or `zM` etc is used
set nofoldenable

" With :set hidden, opening a new file when the current buffer has unsaved
" changes causes files to be hidden instead of closed
set hidden

" Allow tab names to be remembered in sessions
set sessionoptions+=tabpages,globals

" Briefly move the cursor to the matching brace
set showmatch

" Lazyredraw attempts to solve Vim lag by reducing the amount of
" processing required. When enabled, any action that is not typed
" will not cause the screen to redraw
set lazyredraw

" Don't display the current mode (Insert, Visual, Replace)
" in the status line. This info is already shown in the
" Airline status bar.
set noshowmode

" Stop vim trying to syntax highlight long lines, typically found in minified
" files. This greatly reduces lag yet is still wide enough for large displays
set synmaxcol=500

" Highlight current line
set cursorline

" Indent using two spaces.
set softtabstop=2
set shiftwidth=2

" Smoother scrolling when moving horizontally
set sidescroll=1

" Use spaces, not tabs
set expandtab

" Don't scan included files. The .tags file is more performant.
set complete-=i
set complete+=kspell

" Prevent autocomplete options opening in scratchpad
set completeopt-=preview

" This is set low so that gitgutter updates reasonably quickly
" https://github.com/airblade/vim-gitgutter#when-are-the-signs-updated
set updatetime=300

" Don't wrap lines
set nowrap

" Keep the cursor in the same place when switching buffers
set nostartofline

" Show col and line position in the statusbar
set ruler

" Open new split panes to right and bottom, which feels more natural
set splitbelow
set splitright

" Ignore case of searches
set ignorecase

" If a pattern contains an uppercase letter
" it is case sensitive, otherwise, it is not
set smartcase

" Highlight tailing whitespace
set list listchars=tab:\ \ ,trail:Â·

" Use the OS clipboard by default (on versions compiled with `+clipboard`)
set clipboard=unnamed

" Spell check
set spelllang=en

" Where it should get the dictionary files
let g:spellfile_URL = 'http://ftp.vim.org/vim/runtime/spell'

" For autocompletion, complete as much as you can.
set wildmode=list:longest,full

" don't add extra space after ., !, etc. when joining
set nojoinspaces

" Allow cursor keys in insert mode
set esckeys

" Eliminate delay when switching modes
set ttimeoutlen=0

" Auto save changes before switching buffer
set autowrite

" Add the g flag to search/replace by default
set gdefault

" Centralize backups, swapfiles and undo history
set backupdir=~/.config/nvim/backups
set directory=.,$TEMP " Stop the swp file warning

if has("persistent_undo")
  set undodir=~/.config/nvim/undo
  set undofile
  set undolevels=1000
  set undoreload=10000
endif

" Donât create backups when editing files in certain directories
set backupskip=/tmp/*,/private/tmp/*

" Respect modeline in files
set modeline
set modelines=4

" Enable per-directory .vimrc files and disable unsafe commands in them
set exrc
set secure

" Show âinvisibleâ characters
set lcs=tab:â¸\ ,trail:Â·,nbsp:_
set list

" Disable error bells
set noerrorbells

" Don't show the intro message when starting Vim
" Also suppress several 'Press Enter to continue messages' especially
" with FZF
set shortmess=aoOtI

" Show the current mode
set title

" Show the (partial) command as itâs being typed
set showcmd

" Line numbers
set number
set relativenumber

" Path and file extensions to look for when using `gf`
set suffixesadd+=.css,index.css
set path+=node_modules

" Start scrolling before cursor gets to the edge
set scrolloff=5
set sidescrolloff=15
set sidescroll=1

" Remap annoying mistakes to something useful
cnoreabbrev W! w!
cnoreabbrev Q! q!
cnoreabbrev q: :q
cnoreabbrev Qall! qall!
cnoreabbrev Wq wq
cnoreabbrev Wa wa
cnoreabbrev wQ wq
cnoreabbrev WQ wq
cnoreabbrev W w
cnoreabbrev Qa q
cnoreabbrev Qall qall

" Vim only
" These are set by default in neovim

if !has('nvim')
  " Allow vim to determine the type from the file contents
  filetype plugin indent on
  syntax on
  " Autoindent when starting new line, or using `o` or `O`.
  set autoindent
  " Auto reload files on change
  set autoread
  " Allow backspace in insert mode
  set backspace=indent,eol,start
  " Use UTF-8 without BOM
  set encoding=utf-8 nobomb
  " Delete comment character when joining commented lines
  set formatoptions+=j
  " Store more history (default is 50)
  set history=1000
  " Highlight searches
  set hlsearch
  set incsearch
  " Always show status line
  set laststatus=2
  " Enable mouse in all modes
  set mouse=a
  " Use 'shiftwidth' when using `<Tab>` in front of a line.
  " By default it's used only for shift commands (`<`, `>`).
  set smarttab
  " Optimize for fast terminal connections
  set ttyfast
  " Enhance command-line completion
  set wildmenu
endif

" Key mappings
" ------------------------------------------------------------------------------

" Save file
nnoremap <leader>w :w<cr>

" Force j and k to work on display lines
nnoremap k gk
nnoremap j gj
vnoremap k gk
vnoremap j gj

" Map <C-i> to <f7> with Karabiner so tab can be used at the same time
nnoremap <f7> <C-i>

" Move back a tab faster
nnoremap tg gT

" Adjust window size with arrow keys
noremap <right> <C-w>>
noremap <left> <C-w><
noremap <up> <C-w>+
noremap <down> <C-w>-

" Delete line but preserve the space
nnoremap dD S<Esc>

" Make `Y` work from the cursor to the end of line
nnoremap Y y$

" Reformat whole file and move back to original position
nnoremap g= gg=G``

" Use K to join current line with line above, just like J does with line below
nnoremap K kJ

" Automatically jump to end of pasted text
vnoremap <silent> y y`]
vnoremap <silent> p p`]
nnoremap <silent> p p`]

" Log out the word under the cursor
nmap <leader>cl yiwoconsole.log('<c-r>"', <c-r>");<esc>^

" Split
noremap <leader>x :<C-u>split<cr>
noremap <leader>v :<C-u>vsplit<cr>

" Switch buffers
nnoremap <silent> H :bp<CR>
nnoremap <silent> L :bn<CR>

" Spellcheck
nnoremap <F6> :setlocal spell!<cr>

" Clear search (highlight)
nnoremap <silent> <leader>k :noh<cr>

" Automatically 'gv' (go to previously selected visual block)
" after indenting or unindenting.
vnoremap < <gv
vnoremap > >gv

" Press enter for newline without insert
nnoremap <cr> o<esc>

" Allow quick edits and sourcing of vimrc
nnoremap <leader>ev :vsplit $MYVIMRC<cr>
nnoremap <leader>sv :source $MYVIMRC<cr>

if exists(':tnoremap')
  " Allow movement seamlessly with terminals
  tnoremap <C-h> <C-\><C-n><C-w>h
  tnoremap <C-j> <C-\><C-n><C-w>j
  tnoremap <C-k> <C-\><C-n><C-w>k
  tnoremap <C-l> <C-\><C-n><C-w>l
endif

"  Plugin config
" ------------------------------------------------------------------------------

if s:has_plugin('undotree')
  let g:undotree_WindowLayout = 2
  nnoremap <f5> :UndotreeToggle<cr>
endif

if s:has_plugin('bufexplorer')
  let g:bufExplorerDisableDefaultKeyMapping=1
  let g:bufExplorerShowNoName=1
  let g:bufExplorerShowRelativePath=1
  nnoremap <leader>b :ToggleBufExplorer<cr>
endif

if s:has_plugin('ultisnips')
  let g:UltiSnipsExpandTrigger="<tab>"
  let g:UltiSnipsJumpForwardTrigger="<tab>"
  let g:UltiSnipsJumpBackwardTrigger="<s-tab>"
endif

if s:has_plugin('vim-easyclip')
  let g:EasyClipUseSubstituteDefaults = 0
  nmap s <plug>SubstituteOverMotionMap
  xmap s <plug>XEasyClipPaste
  imap <c-v> <plug>EasyClipInsertModePaste
  " Place a mark (m taken by easyclip)
  nnoremap gm m
endif

if s:has_plugin('sideways.vim')
  nnoremap ]j :SidewaysRight<cr>
  nnoremap [j :SidewaysLeft<cr>
endif

if s:has_plugin('vim-vinegar')
  " Remap as this is too easy to hit by accident with 0 and = nearby
  autocmd VimEnter * nmap - <nop>
  autocmd VimEnter * nmap _ <Plug>VinegarUp
endif

if s:has_plugin('vim-gutentags')
  let g:gutentags_tagfile = 'vim_tags'
  let g:gutentags_exclude = [
        \ 'node_modules',
        \ 'dist',
        \ 'vendor',
        \ 'bower_components']
endif

if s:has_plugin('vim-javascript')
  let g:javascript_plugin_flow=1
  let g:javascript_plugin_jsdoc=1
endif

if s:has_plugin('mocha.vim')
  autocmd FileType javascript,javascript.jsx nnoremap <buffer> <localleader>o :ToggleOnly<cr>
  autocmd FileType javascript,javascript.jsx nnoremap <buffer> <localleader>n :FocusNextTest<cr>
  autocmd FileType javascript,javascript.jsx nnoremap <buffer> <localleader>N :FocusPreviousTest<cr>
endif

if s:has_plugin('vim-qargs')
  " Replace with Qdo
  nnoremap <leader>r :Qdo<space> :%s/
endif

if s:has_plugin('ack.vim')
  " Search with Ack
  nnoremap <leader>a :Ack!<space>-Q<space>
endif

if s:has_plugin('vim-sneak')
  let g:sneak#use_ic_scs = 0
  nmap gs <Plug>Sneak_s
  nmap gS <Plug>Sneak_S
  xmap gs <Plug>Sneak_s
  xmap gS <Plug>Sneak_S
  let g:sneak#streak = 1
endif

if s:has_plugin('deoplete.nvim')
  let g:deoplete#enable_at_startup = 1
  let g:deoplete#auto_completion_start_length = 1
  let g:deoplete#sources = {}
  let g:deoplete#sources.python = ['ultisnips']
endif

if s:has_plugin('deoplete-ternjs')
  let g:tern_show_signature_in_pum = 1
endif

if s:has_plugin('vim-session')
  let g:session_autosave = 'yes'
  let g:session_autoload = 'no'
endif

if s:has_plugin('vim-polyglot')
  let g:polyglot_disabled = ['markdown']
  let g:jsx_ext_required = 0
endif

if s:has_plugin('splitjoin.vim')
  let g:splitjoin_split_mapping = ''
  let g:splitjoin_join_mapping = ''
  nmap gj :SplitjoinSplit<cr>
  nmap gk :SplitjoinJoin<cr>
endif

if s:has_plugin('vim-closetag')
  let g:closetag_filenames = "*.html,*.js,*.jsx"
endif

if s:has_plugin('vim-choosewin')
  nmap  <leader>h <plug>(choosewin)
  let g:choosewin_label_fill = 0
  let g:choosewin_blink_on_land = 0
endif

if s:has_plugin('auto-pairs')
  let g:AutoPairsCenterLine = 0
endif

if s:has_plugin('vim-bbye')
  nnoremap <silent> Q :Bdelete<cr>
endif

if s:has_plugin('taboo.vim')
  let g:taboo_tabline = 0 " Let airline handle it all
  let g:taboo_renamed_tab_format = '%l%m'
  nnoremap th :tabprev<cr>
  nnoremap tl :tabnext<cr>
  nnoremap tn :tabnew<cr>
  nnoremap td :tabclose<cr>
  nnoremap to :TabooOpen<space>
  nnoremap tr :TabooRename<space>
endif

if s:has_plugin('nerdtree')
  let g:NERDTreeWinSize = 30
  let NERDTreeIgnore = ['\.py[cd]$', '\~$', '\.swo$', '\.swp$', '^\.git$', '^\.hg$', '^\.svn$', '\.bzr$']
  let NERDTreeShowHidden = 1
  let NERDTreeHijackNetrw = 1
  let NERDTreeAutoDeleteBuffer = 1
  nnoremap <leader>t :NERDTreeToggle<cr>
endif

if s:has_plugin('gv.vim')
  nnoremap <c-g> :GV!<cr>
endif

if s:has_plugin('fzf.vim')
  let g:fzf_height = '30%'
  let g:fzf_commits_log_options = '--color --graph --pretty=format:"%C(yellow)%h%Creset -%C(auto)%d%Creset %s %C(bold blue)(%cr) %Cred<%an>%Creset" --abbrev-commit'

  nnoremap <c-p> :FZF<cr>
  nnoremap <c-i> :Buffers<cr>
  nnoremap <c-t> :Tags<cr>
  nnoremap <c-@> :Ag<cr>
  nnoremap <silent> <BS> :History:<cr>

  " Allow options to be passed to FZF :Ag
  " Probably quite hacky until a better solution appears
  " https://github.com/junegunn/fzf.vim/issues/92#issuecomment-191248596
  function! s:ag_with_opts(arg, bang)
    let tokens  = split(a:arg)
    let ag_opts = join(filter(copy(tokens), 'v:val =~ "^-"'))
    let query   = join(filter(copy(tokens), 'v:val !~ "^-"'))
    call fzf#vim#ag(query, '--hidden --ignore .git', a:bang ? {} : {'down': '40%'})
  endfunction

  if has('autocmd')
    autocmd VimEnter * command! -nargs=* -bang Ag call s:ag_with_opts(<q-args>, <bang>0)
  endif
endif

if s:has_plugin('ListToggle')
  let g:lt_height = 8
endif

if executable('ag')
  " Use ag over grep
  set grepprg=ag\ --nogroup\ --nocolor
  " Use ag with ack.vim - https://github.com/ggreer/the_silver_searcher#vim
  let g:ackprg = 'ag --smart-case --nogroup --nocolor --column'
endif

if executable('jq')
  " JSON beautifier
  nnoremap <leader>z :%!jq '.'<cr>
endif

if s:has_plugin('vim-airline')
  let g:airline_theme = 'onedark'
  let g:airline#extensions#branch#enabled = 1
  let g:airline_powerline_fonts = 1
  let g:airline#extensions#tmuxline#enabled = 0
  let g:airline#extensions#tabline#enabled = 1 " Enable the list of buffers
  let g:airline#extensions#tabline#fnamemod = ':t' " Show the filename
  let g:airline#extensions#tabline#fnamecollapse = 0
  let g:airline#extensions#tabline#tab_nr_type = 1 " Show tab number
  let g:airline#extensions#tabline#buffer_nr_show = 0
  let g:airline_left_sep = ''
  let g:airline_left_alt_sep = ''
  let g:airline_right_sep = ''
  let g:airline_right_alt_sep = ''
endif

if s:has_plugin('vim-signify')
  let g:signify_vcs_list = ['git']
  let g:signify_update_on_focusgained = 1
  let g:signify_update_on_bufenter = 1
  " hunk text object
  omap ih <plug>(signify-motion-inner-pending)
  xmap ih <plug>(signify-motion-inner-visual)
  omap ah <plug>(signify-motion-outer-pending)
  xmap ah <plug>(signify-motion-outer-visual)
endif

if s:has_plugin('neomake')
  let g:neomake_list_height = 8
  let g:neomake_html_enabled_makers = []
  let g:neomake_error_sign = {'text': 'x', 'texthl': 'NeomakeErrorSign'}
  let g:neomake_warning_sign = {'text': 'â¢', 'texthl': 'NeomakeWarningSign'}

  " Use local copies of linting tools
  au BufEnter *.js let b:neomake_javascript_eslint_exe = nrun#Which('eslint')
  au BufEnter *.css,*.scss let b:neomake_css_stylelint_exe = nrun#Which('stylelint')

  " Integrate Flow with Neomake
  " https://github.com/rafaelrinaldi/til/blob/master/vim/linting-with-flow.md

  " Tries to find Flow's binary locally, fallback to globally installed
  if executable($PWD .'/node_modules/.bin/flow')
    let s:flow_path = $PWD .'/node_modules/.bin/flow'
  else
    let s:flow_path = 'flow'
  endif

  " Custom maker that uses `flow-vim-quickfix` to improve the output
  let s:flow_maker = {
        \ 'exe': 'sh',
        \ 'args': ['-c', s:flow_path.' --json --strip-root | flow-vim-quickfix'],
        \ 'errorformat': '%E%f:%l:%c\,%n: %m',
        \ 'cwd': '%:p:h'
        \ }

  let s:neomake_makers = ['flow', 'eslint']
  let g:neomake_javascript_enabled_makers = s:neomake_makers
  let g:neomake_jsx_enabled_makers = s:neomake_makers

  " Same thing as above but this time to pass in the maker configuration
  let g:neomake_javascript_flow_maker = s:flow_maker
  let g:neomake_jsx_flow_maker = s:flow_maker

  autocmd! BufWinEnter,BufWritePost * Neomake
endif

if s:has_plugin('tmuxline.vim')
  let g:tmuxline_preset = {
        \'a'    : '#S',
        \'win'  : '#I #W',
        \'cwin' : '#I #W',
        \'y'    : ['#(spotify)', '#(ipconfig getifaddr en0)', 'cpu: #{cpu_percentage}', 'batt: #(battery -a -p -t)'],
        \'z'    : ['%R', '%d-%m-%Y'],
        \'options' : {'status-justify' : 'left'}}
endif

if s:has_plugin('emmet-vim')
  imap hh <C-y>,
endif

" Output the current syntax group
nnoremap <f10> :echo "hi<" . synIDattr(synID(line("."),col("."),1),"name") . '> trans<'
\ . synIDattr(synID(line("."),col("."),0),"name") . "> lo<"
\ . synIDattr(synIDtrans(synID(line("."),col("."),1)),"name") . ">"<cr>

" Automatic commands
" ------------------------------------------------------------------------------
"
if has('autocmd')
  " Open help in a vertical split
  augroup vimrc-help
    autocmd!
    autocmd BufEnter *.txt if &buftype == 'help' | wincmd L | setlocal relativenumber | endif
  augroup END

  augroup file-types
    autocmd!

    " Override some syntaxes so things look better
    autocmd BufNewFile,BufRead *.html setlocal syntax=swig
    autocmd BufNewFile,BufRead *.css setlocal syntax=scss
    autocmd BufNewFile,BufRead *.sss setlocal syntax=stylus
    autocmd BufNewFile,BufRead *.ts,*.snap,*.es6,*.tsx setlocal filetype=javascript.jsx
    autocmd BufNewFile,BufRead *stylelintrc,*eslintrc,*babelrc,*jshintrc setlocal syntax=json

    " Wrap text and turn on spell for markdown files
    autocmd BufNewFile,BufRead *.md setlocal wrap linebreak spell filetype=markdown

    " Automatically wrap at 72 characters and spell check git commit messages
    autocmd FileType gitcommit setlocal textwidth=72
    autocmd FileType gitcommit setlocal spell

    " Allow stylesheets to autocomplete hyphenated words
    autocmd FileType css,scss,sass setlocal iskeyword+=-
  augroup END

  " Switch between normal and relative line numbers and cursorline
  " when switching modes
  augroup highlight-when-switching-modes
    autocmd!
    autocmd InsertEnter * setlocal number norelativenumber nocursorline
    autocmd InsertLeave * setlocal relativenumber cursorline
    autocmd WinEnter    * setlocal cursorline
    autocmd WinLeave    * setlocal nocursorline
  augroup END

  " Remove whitespace on save
  augroup whitespace
    autocmd!
    autocmd BufWritePre * :%s/\s\+$//e
  augroup END

  " Periodically check for file changes
  augroup checktime
    autocmd!
    autocmd CursorHold * silent! checktime
  augroup END

  " Move to the second line of a git commit
  augroup move-to-top-of-commit
    autocmd!
    au FileType gitcommit au! BufEnter COMMIT_EDITMSG call setpos('.', [0, 2, 1, 0])
  augroup END

  " Resize splits when vim changes size (like with tmux opening/closing)
  augroup auto-resize
    autocmd!
    autocmd VimResized * wincmd =
  augroup END

  " Autocomplete
  augroup omnifuncs
    autocmd!
    autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
    autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
    autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
    autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
    autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags
  augroup endif
endif
