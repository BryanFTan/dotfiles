" Use Vim settings, rather then Vi settings.
" This must be first, because it changes other options as a side effect.
set nocompatible

" Plugin install
" https://github.com/junegunn/vim-plug
" -----------------------------------------------------------------------------

call plug#begin('~/.vim/plugged')

" Theme
Plug 'morhetz/gruvbox'

" tmux
Plug 'christoomey/vim-tmux-navigator'
Plug 'tmux-plugins/vim-tmux-focus-events'

" Finding and replacing
Plug 'mileszs/ack.vim'
Plug 'henrik/vim-qargs'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'

" File management
Plug 'scrooloose/nerdtree'
Plug 'Xuyuanp/nerdtree-git-plugin'
Plug 'tpope/vim-vinegar'

" Buffers
Plug 'schickling/vim-bufonly'
Plug 'moll/vim-bbye'

" Language pack
Plug 'sheerun/vim-polyglot'

" Editing
Plug 'Raimondi/delimitMate'
Plug 'nathanaelkane/vim-indent-guides', {'on': 'IndentGuidesToggle'}
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-unimpaired'
Plug 'tpope/vim-commentary'
Plug 'scrooloose/syntastic'

" Text objects
Plug 'wellle/targets.vim'

" General
Plug 'editorconfig/editorconfig-vim'
Plug 'sjl/vitality.vim'
Plug 'mbbill/undotree', {'on': 'UndotreeToggle'}
Plug 'regedarek/ZoomWin'
Plug 'airblade/vim-rooter'

" Refactoring
Plug 'AndrewRadev/splitjoin.vim'
Plug 'tpope/vim-surround'

" Copy/Paste behaviour
Plug 'svermeulen/vim-easyclip'
Plug 'ConradIrwin/vim-bracketed-paste'

" Sessions
Plug 'xolox/vim-misc'
Plug 'xolox/vim-session'

" HTML/CSS
Plug 'ap/vim-css-color', {'for': 'css'}
Plug 'mattn/emmet-vim'
Plug 'alvan/vim-closetag'

" Status bar
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'bling/vim-bufferline'
Plug 'edkolev/tmuxline.vim'

" Tabs
Plug 'gcmt/taboo.vim'

" Snippets
Plug 'SirVer/ultisnips' | Plug 'honza/vim-snippets'

" Autocomplete
Plug 'jordwalke/AutoComplPop'
Plug 'Valloric/YouCompleteMe'
Plug 'ervandew/supertab'

" Git
Plug 'tpope/vim-fugitive'
Plug 'mhinz/vim-signify'

" JavaScript
Plug 'othree/javascript-libraries-syntax.vim'
Plug 'pangloss/vim-javascript'
Plug 'jelera/vim-javascript-syntax'
Plug 'ternjs/tern_for_vim'
Plug 'mxw/vim-jsx'
Plug 'moll/vim-node'

call plug#end()

"  Plugin config
" -----------------------------------------------------------------------------

" Undotree
let g:undotree_WindowLayout = 2

" UltiSnips
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<tab>"
let g:UltiSnipsJumpBackwardTrigger="<s-tab>"

" Make YCM compatible with UltiSnips (using supertab)
let g:ycm_key_list_select_completion = ['<C-n>', '<Down>']
let g:ycm_key_list_previous_completion = ['<C-p>', '<Up>']
let g:SuperTabDefaultCompletionType = '<C-n>'

" Sessions
let g:session_autosave = 'yes'
let g:session_autoload = 'no'

" Treat <li> and <p> tags like the block tags they are
let g:html_indent_tags = 'li\|p'

" Allow JSX in normal JS files
let g:jsx_ext_required = 0

" Taboo
let g:taboo_tabline = 0 " Let airline handle it all
let g:taboo_renamed_tab_format = '%l%m'

" Syntastic
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
let g:syntastic_error_symbol='✗'
let g:syntastic_warning_symbol='⚠'
let g:syntastic_style_error_symbol = '✗'
let g:syntastic_style_warning_symbol = '⚠'
let g:syntastic_aggregate_errors = 1
let g:syntastic_html_tidy_exec = 'tidy5'
let g:syntastic_loc_list_height = 5

" Tern
" enable keyboard shortcuts
let g:tern_map_keys = 1

" Set checkers
let g:syntastic_scss_checkers = ['']
let g:syntastic_css_checkers = ['stylelint']
let g:syntastic_javascript_checkers = ['eslint']

" NERD tree
let g:NERDTreeWinSize = 30
let NERDTreeIgnore = ['\.py[cd]$', '\~$', '\.swo$', '\.swp$', '^\.git$', '^\.hg$', '^\.svn$', '\.bzr$']
let NERDTreeShowHidden = 1
let NERDTreeHijackNetrw = 1
let NERDTreeAutoDeleteBuffer = 1

" fzf
let g:fzf_height = '30%'
let g:fzf_commits_log_options = '--color --graph --pretty=format:"%C(yellow)%h%Creset -%C(auto)%d%Creset %s %C(bold blue)(%cr) %Cred<%an>%Creset" --abbrev-commit'

" The Silver Searcher
if executable('ag')
  " Use ag over grep
  set grepprg=ag\ --nogroup\ --nocolor
  " Use ag with ack.vim - https://github.com/ggreer/the_silver_searcher#vim
  let g:ackprg = 'ag --smart-case --nogroup --nocolor --column'
endif

" delimitMate
let delimitMate_expand_cr = 1

" Bufferline
let g:bufferline_echo = 0 " Display buffers in the statusline
let g:bufferline_show_bufnr = 0 " Hide buffer number

" vim-airline
let g:airline_theme = 'base16_colors'
let g:airline#extensions#syntastic#enabled = 1
let g:airline#extensions#branch#enabled = 1
let g:airline_powerline_fonts = 1
let g:airline#extensions#tmuxline#enabled = 0
let g:airline#extensions#tabline#enabled = 1 " Enable the list of buffers
let g:airline#extensions#tabline#fnamemod = ':t' " Show just the filename
let g:airline#extensions#tabline#tab_nr_type = 1 " Show tab number

" vim-signify
let g:signify_vcs_list = ['git']
let g:signify_update_on_focusgained = 1
let g:signify_update_on_bufenter = 1

" Tmuxline
let g:tmuxline_preset = {
      \'a'    : '#S',
      \'win'  : '#I #W',
      \'cwin' : '#I #W',
      \'y'    : ['#(tmux-mem-cpu-load --interval 2)', '#(ipconfig getifaddr en0)', '#(battery -p -t) '],
      \'z'    : ['%R', '%d-%m-%Y'],
      \'options' : {'status-justify' : 'left'}}

" JS lib syntax
let g:used_javascript_libs = 'underscore,jquery,react,requirejs,jasmine,chai'

"  Vim config
" -----------------------------------------------------------------------------

" Set space to leader
let mapleader = ' '

" Theme
colorscheme gruvbox
set background=dark
syntax enable

" Turn off swapfiles
set noswapfile
set nobackup
set nowb

" Allow vim to determine the type from the file contents
filetype plugin indent on

" Allow editing of binary files
" Must be set before expandtab
" http://stackoverflow.com/a/26901774
set binary

" Make it obvious where 80 characters is
set textwidth=80
set colorcolumn=+1

" Use `indent` based folding
set foldmethod=indent
set foldlevelstart=10

" Abbrev. of messages (avoids 'hit enter')
set shortmess+=filmnrxoOtT

" Store more history (default is 50)
set history=1000

" With :set hidden, opening a new file when the current buffer has unsaved
" changes causes files to be hidden instead of closed
set hidden

" Allow tab names to be remembered in sessions
set sessionoptions+=tabpages,globals

" Briefly move the cursor to the matching brace
set showmatch

" Lazyredraw attempts to solve Vim lag by reducing the amount of
" processing required. When enabled, any action that is not typed
" will not cause the screen to redraw
set lazyredraw

" Don't display the current mode (Insert, Visual, Replace)
" in the status line. This info is already shown in the
" Airline status bar.
set noshowmode

" Stop vim trying to syntax highlight long lines, typically found in minified
" files. This greatly reduces lag yet is still wide enough for large displays
set synmaxcol=500

" Highlight current line
set cursorline

" Autoindent when starting new line, or using `o` or `O`.
set autoindent

" Indent using two spaces.
set softtabstop=2
set shiftwidth=2

" Use spaces, not tabs
set expandtab

" Use 'shiftwidth' when using `<Tab>` in front of a line.
" By default it's used only for shift commands (`<`, `>`).
set smarttab

" Don't scan included files. The .tags file is more performant.
set complete-=i

" This is set low so that gitgutter updates reasonably quickly
" https://github.com/airblade/vim-gitgutter#when-are-the-signs-updated
set updatetime=300

" Don't wrap lines
set nowrap

" Keep the cursor in the same place when switching buffers
set nostartofline

" Show col and line position in the statusbar
set ruler

" Open new split panes to right and bottom, which feels more natural
set splitbelow
set splitright

" Highlight searches
set hlsearch
set incsearch

" Ignore case of searches
set ignorecase

" If a pattern contains an uppercase letter
" it is case sensitive, otherwise, it is not
set smartcase

" Highlight tailing whitespace
set list listchars=tab:\ \ ,trail:·

" Use the OS clipboard by default (on versions compiled with `+clipboard`)
set clipboard=unnamed

" Spell check
set spelllang=en
highlight clear SpellBad
highlight SpellBad term=standout ctermfg=1 term=underline cterm=underline
highlight clear SpellCap
highlight SpellCap term=underline cterm=underline
highlight clear SpellRare
highlight SpellRare term=underline cterm=underline
highlight clear SpellLocal
highlight SpellLocal term=underline cterm=underline

" Enhance command-line completion
set wildmenu

" For autocompletion, complete as much as you can.
set wildmode=longest,full

" Allow cursor keys in insert mode
set esckeys

" Allow backspace in insert mode
set backspace=indent,eol,start

" Optimize for fast terminal connections
set ttyfast

" Delete comment character when joining commented lines
set formatoptions+=j

" Fix background not filling window correctly when moving panes around with
" tmux
if &term =~ '256color'
  " disable Background Color Erase (BCE)
  set t_ut=
endif

" Eliminate delay when switching modes
set ttimeoutlen=0

" Auto save changes before switching buffer
set autowrite

" Add the g flag to search/replace by default
set gdefault

" Use UTF-8 without BOM
set encoding=utf-8 nobomb

" Centralize backups, swapfiles and undo history
set backupdir=~/.vim/backups
set directory=.,$TEMP " Stop the swp file warning
if exists("&undodir")
  set undodir=~/.vim/undo
endif

if has("persistent_undo")
  set undodir=~/.vim/undo
  set undofile
endif

" Don’t create backups when editing files in certain directories
set backupskip=/tmp/*,/private/tmp/*

" Respect modeline in files
set modeline
set modelines=4

" Enable per-directory .vimrc files and disable unsafe commands in them
set exrc
set secure

" Show “invisible” characters
set lcs=tab:▸\ ,trail:·,nbsp:_
set list

" Always show status line
set laststatus=2

" Enable mouse in all modes
set mouse=a

" Disable error bells
set noerrorbells

" Auto reload files on change
set autoread

" Don’t show the intro message when starting Vim
set shortmess=atI

" Show the current mode
set title

" Show the (partial) command as it’s being typed
set showcmd

" Line numbers
set number
set relativenumber

" Start scrolling before cursor gets to the edge
set scrolloff=5
set sidescrolloff=15
set sidescroll=1

" Remap annoying mistakes to something useful
cnoreabbrev W! w!
cnoreabbrev Q! q!
cnoreabbrev q: :q
cnoreabbrev Qall! qall!
cnoreabbrev Wq wq
cnoreabbrev Wa wa
cnoreabbrev wQ wq
cnoreabbrev WQ wq
cnoreabbrev W w
cnoreabbrev Qa q
cnoreabbrev Qall qall

" Key mappings
" -----------------------------------------------------------------------------

" Remap emmet
imap hh <C-y>,

" Save file
nnoremap <leader>w :w<cr>

" Shortcut to change inner word
nnoremap s ciw

" Clone paragraph
noremap cp yap<S-}>p

" Make `Y` work from the cursor to the end of line
nnoremap Y y$

" Reformat whole file and move back to original position
nnoremap g= gg=G``

" Auto center on matched string.
noremap n nzz
noremap N Nzz

" Split
noremap <leader>x :<C-u>split<cr>
noremap <leader>v :<C-u>vsplit<cr>

" JSON beautifier
nnoremap <leader>z :%!jq '.'<cr>

" Spellcheck
map <F6> :setlocal spell!<cr>

" Close buffer
nnoremap <silent> Q :Bdelete<cr>

" UndoTree
nnoremap <f5> :UndotreeToggle<cr>

" Clear search (highlight)
nnoremap <silent> <leader>k :noh<cr>

" Open new buffers
" Single window
nnoremap <leader>nb :enew<cr>

" Automatically 'gv' (go to previously selected visual block) after indenting or unindenting.
vnoremap < <gv
vnoremap > >gv

" Press enter for newline without insert
nmap <S-Enter> O<Esc>
nmap <cr> o<Esc>

" NERD tree
nmap <leader>t :NERDTreeFind<cr>

" fzf
nnoremap <c-p> :FZF<cr>
nnoremap <c-i> :Buffers<cr>
nnoremap <c-g> :BCommits<cr>
nnoremap <leader>l :BLines<cr>
nnoremap <leader><space> :Ag<cr>
nmap <silent> <BS> :History:<cr>
imap <c-x><c-f> <plug>(fzf-complete-file-ag)

" Allow quick edits and sourcing of vimrc
nnoremap <leader>ev :vsplit $MYVIMRC<cr>
nnoremap <leader>sv :source $MYVIMRC<cr>

" IndentGuides
" Add this here because this plugin is loaded ondemand so this mapping is not
" present on initial load
nmap <leader>ig :IndentGuidesToggle<cr>

" Tabs
nnoremap th :tabprev<cr>
nnoremap tl :tabnext<cr>
nnoremap tn :tabnew<cr>
nnoremap td :tabclose<cr>
nnoremap to :TabooOpen<space>
nnoremap tr :TabooRename<space>

" Search with Ack
nnoremap <leader>a :Ack!<space>-Q<space>

" Replace with Qdo
nnoremap <leader>r :Qdo<space> :%s/

" Allow options to be passed to FZF :Ag
" Probably quite hacky until a better solution appears
" https://github.com/junegunn/fzf.vim/issues/92#issuecomment-191248596
function! s:ag_with_opts(arg, bang)
  let tokens  = split(a:arg)
  let ag_opts = join(filter(copy(tokens), 'v:val =~ "^-"'))
  let query   = join(filter(copy(tokens), 'v:val !~ "^-"'))
  call fzf#vim#ag(query, '--hidden --ignore .git', a:bang ? {} : {'down': '40%'})
endfunction

" Automatic commands
if has("autocmd")
  " Resize splits when vim changes size (like with tmux opening/closing)
  " Disable to see if it fixes a bug
  " autocmd VimResized * wincmd =

  " Open help in a vertical split
  augroup vimrc_help
    autocmd!
    autocmd BufEnter *.txt if &buftype == 'help' | wincmd L | endif
  augroup END

  " Remember cursor position
  augroup vimrc-remember-cursor-position
    autocmd!
    autocmd BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g`\"" | endif
  augroup END

  " fzf
  autocmd VimEnter * command! -nargs=* -bang Ag call s:ag_with_opts(<q-args>, <bang>0)

  " Override some syntaxes so things look better
  autocmd BufNewFile,BufRead *.html set syntax=jinja
  autocmd BufNewFile,BufRead *.css set syntax=scss

  " Wrap text and turn on spell for markdown files
  autocmd BufNewFile,BufRead *.md setlocal wrap linebreak spell filetype=markdown

  " Automatically wrap at 72 characters and spell check git commit messages
  autocmd FileType gitcommit setlocal textwidth=72
  autocmd FileType gitcommit setlocal spell

  " Close YCM window after autocomplete is done
  autocmd CompleteDone * pclose

  " Allow stylesheets to autocomplete hyphenated words
  autocmd FileType css,scss,sass setlocal iskeyword+=-

  " Switch between normal and relative line numbers
  " https://gist.github.com/dlo/3012145
  augroup linenumbers
    autocmd!
    autocmd InsertEnter * :set number norelativenumber
    autocmd InsertLeave * :set relativenumber
  augroup END

  " Remove whitespace on save
  autocmd BufWritePre * :%s/\s\+$//e

  " Periodically check for file changes
  autocmd CursorHold * silent! checktime

  " Move to the top of a git commit
  au FileType gitcommit au! BufEnter COMMIT_EDITMSG call setpos('.', [0, 1, 1, 0])

  " YouCompleteMe
  autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
  autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
  autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
  autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
  autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags
  autocmd FileType ruby setlocal omnifunc=rubycomplete#Complete
  autocmd FileType haskell setlocal omnifunc=necoghc#omnifunc
endif